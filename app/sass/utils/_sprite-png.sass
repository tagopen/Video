// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$box-name: 'box'
$box-x: 0px
$box-y: 119px
$box-offset-x: 0px
$box-offset-y: -119px
$box-width: 163px
$box-height: 128px
$box-total-width: 486px
$box-total-height: 277px
$box-image: 'sprite.png'
$box: (0px, 119px, 0px, -119px, 163px, 128px, 486px, 277px, 'sprite.png', 'box', )
$candy-name: 'candy'
$candy-x: 377px
$candy-y: 0px
$candy-offset-x: -377px
$candy-offset-y: 0px
$candy-width: 109px
$candy-height: 134px
$candy-total-width: 486px
$candy-total-height: 277px
$candy-image: 'sprite.png'
$candy: (377px, 0px, -377px, 0px, 109px, 134px, 486px, 277px, 'sprite.png', 'candy', )
$check-name: 'check'
$check-x: 377px
$check-y: 162px
$check-offset-x: -377px
$check-offset-y: -162px
$check-width: 22px
$check-height: 17px
$check-total-width: 486px
$check-total-height: 277px
$check-image: 'sprite.png'
$check: (377px, 162px, -377px, -162px, 22px, 17px, 486px, 277px, 'sprite.png', 'check', )
$confetti-name: 'confetti'
$confetti-x: 262px
$confetti-y: 0px
$confetti-offset-x: -262px
$confetti-offset-y: 0px
$confetti-width: 105px
$confetti-height: 187px
$confetti-total-width: 486px
$confetti-total-height: 277px
$confetti-image: 'sprite.png'
$confetti: (262px, 0px, -262px, 0px, 105px, 187px, 486px, 277px, 'sprite.png', 'confetti', )
$linear-sm-name: 'linear-sm'
$linear-sm-x: 377px
$linear-sm-y: 144px
$linear-sm-offset-x: -377px
$linear-sm-offset-y: -144px
$linear-sm-width: 45px
$linear-sm-height: 8px
$linear-sm-total-width: 486px
$linear-sm-total-height: 277px
$linear-sm-image: 'sprite.png'
$linear-sm: (377px, 144px, -377px, -144px, 45px, 8px, 486px, 277px, 'sprite.png', 'linear-sm', )
$linear-name: 'linear'
$linear-x: 0px
$linear-y: 257px
$linear-offset-x: 0px
$linear-offset-y: -257px
$linear-width: 115px
$linear-height: 20px
$linear-total-width: 486px
$linear-total-height: 277px
$linear-image: 'sprite.png'
$linear: (0px, 257px, 0px, -257px, 115px, 20px, 486px, 277px, 'sprite.png', 'linear', )
$year-name: 'year'
$year-x: 0px
$year-y: 0px
$year-offset-x: 0px
$year-offset-y: 0px
$year-width: 252px
$year-height: 109px
$year-total-width: 486px
$year-total-height: 277px
$year-image: 'sprite.png'
$year: (0px, 0px, 0px, 0px, 252px, 109px, 486px, 277px, 'sprite.png', 'year', )
$spritesheet-width: 486px
$spritesheet-height: 277px
$spritesheet-image: 'sprite.png'
$spritesheet-sprites: ($box, $candy, $check, $confetti, $linear-sm, $linear, $year, )
$spritesheet: (486px, 277px, 'sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
